// Task 1: Encryption and Decryption
#include <iostream>
#include <fstream>
using namespace std;

string encrypt(string text) {
    for (char &c : text) c += 1;
    return text;
}

string decrypt(string text) {
    for (char &c : text) c -= 1;
    return text;
}

int main() {
    ifstream in("input.txt");
    ofstream out("encrypted.txt");
    string line, all;
    while (getline(in, line)) all += line + '\n';
    out << encrypt(all);
    in.close(); out.close();
    ifstream in2("encrypted.txt");
    ofstream out2("decrypted.txt");
    string encrypted, temp;
    while (getline(in2, temp)) encrypted += temp + '\n';
    out2 << decrypt(encrypted);
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////


// Task 2: Find & Replace
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main2() {
    ifstream file("file.txt");
    ofstream out("output.txt");
    string find, replace, line;
    cin >> find >> replace;
    while (getline(file, line)) {
        size_t pos = 0;
        while ((pos = line.find(find, pos)) != string::npos) {
            line.replace(pos, find.length(), replace);
            pos += replace.length();
        }
        out << line << '\n';
    }
    return 0;
}


/////////////////////////////////////////////////////////////////////////////////////////////////

// Task 3: FAT Table Parser
#include <iostream>
#include <vector>
using namespace std;

int main3() {
    vector<int> fat = {0, 1, 2, -1, 5, 6, -1};
    for (int i = 0; i < fat.size(); i++) {
        cout << "File starting at cluster " << i << ": ";
        int next = i;
        while (next != -1) {
            cout << next << " ";
            next = fat[next];
        }
        cout << endl;
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Task 4: Buffer Simulation
#include <iostream>
#include <queue>
using namespace std;

int main4() {
    queue<string> buffer;
    for (int i = 0; i < 5; i++) buffer.push("Data" + to_string(i));
    while (!buffer.empty()) {
        cout << buffer.front() << endl;
        buffer.pop();
    }
    return 0;
}






